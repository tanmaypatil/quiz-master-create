name: Deploy Python Lambda for generating quiz.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:    # Allows manual triggering

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Required to checkout repository

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov
          pip install --upgrade awscli
          
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Create deployment package
        run: |
          mkdir -p build
          cp -r *.py build/
          pip install --target ./build -r requirements.txt
          cd build && zip -r ../deployment-package.zip .
          
      - name: Deploy to Lambda
        run: |
          
          FUNCTION_NAME="${{ secrets.LAMBDA_FUNCTION_NAME }}"
           # Check if function exists
          if aws lambda get-function --function-name $FUNCTION_NAME 2>/dev/null; then
            echo "Function exists, updating code..."
            aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://deployment-package.zip \
            --environment Variables='{"BASIC_AUTH_USERNAME": "${{ secrets.BASIC_AUTH_USERNAME }}","BASIC_AUTH_PASSWORD": "${{ secrets.BASIC_AUTH_PASSWORD }}"
          
          }'
          else
            echo "Function does not exist, creating new one..."
            aws lambda create-function \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://deployment-package.zip \
            --handler lambda_function.lambda_handler \
            --runtime python3.11 \
            --role  arn:aws:iam::585008060270:role/quiz-master
            --environment Variables='{ "BASIC_AUTH_USERNAME": "${{ secrets.BASIC_AUTH_USERNAME }}", "BASIC_AUTH_PASSWORD": "${{ secrets.BASIC_AUTH_PASSWORD }}"
          
          }'
          fi

      - name: Verify deployment
        run: |
         echo "Waiting for Lambda deployment to complete..."
  
         # Initialize variables
         MAX_ATTEMPTS=30
         ATTEMPT=1
         WAIT_TIME=10
  
         # Loop until deployment completes or max attempts reached
         while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Checking deployment status (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
          RESPONSE=$(aws lambda get-function --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} --query 'Configuration.LastUpdateStatus' --output text)
    
          if [[ "$RESPONSE" == "Successful" ]]; then
            echo "✅ Lambda function successfully updated"
            exit 0
          elif [[ "$RESPONSE" == "Failed" ]]; then
            echo "❌ Deployment failed: $RESPONSE"
            exit 1
          fi
    
          echo "Deployment status: $RESPONSE - waiting ${WAIT_TIME}s before next check..."
          sleep $WAIT_TIME
          ATTEMPT=$((ATTEMPT+1))
         done
  
         echo "❌ Deployment timed out after $((MAX_ATTEMPTS * WAIT_TIME)) seconds"
         echo "Last status: $RESPONSE"
         exit 1